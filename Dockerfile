# This Dockerfile builds and runs a Spring Boot application from a multi-module maven project
# It takes two build arguments:
# - MODULE is the path to the Spring Boot module, relative to the base pom file (e.g. module1/submodule2)
# - APP is the name of the generated Spring Boot jar file, normally the artifact id of the maven module

# Additionally, there is the option to use an alternative base image with RXTX installed
# This is activated by setting the build arg `RUNTIME=debian-rxtx`
ARG RUNTIME=adoptopenjdk/openjdk11:alpine-jre

# First stage: Build the source code with maven
FROM maven:3-openjdk-11-slim AS build
WORKDIR /app

# Copy all POM files
# All modules need to be included, even if they are not required for the build
# The list can be generated by running this from the directory with the base pom file:
# find -name pom.xml -printf "COPY %p %h/\n" | sort -t" " -k3 | column -t
COPY  ./pom.xml                    ./
COPY  ./message-api/pom.xml        ./message-api/
COPY  ./message-common/pom.xml     ./message-common/
COPY  ./message-fleetsync/pom.xml  ./message-fleetsync/
COPY  ./message-sms/pom.xml        ./message-sms/
COPY  ./message-tetra/pom.xml      ./message-tetra/

# Resolve all dependencies
RUN --mount=type=secret,id=m2-settings,dst=/root/.m2/settings.xml --mount=type=cache,target=/root/.m2/repository \
    mvn -q -B dependency:go-offline

# Specify the required module
ARG MODULE

# Copy full source code (generated code is ignored through .dockerignore)
COPY ./ ./

# Build the requested module and dependencies
RUN --mount=type=cache,target=/root/.m2/repository \
    mvn -q package -pl "${MODULE}" -am

# Extract the JAR
ARG APP
RUN java -Djarmode=layertools -jar /app/${MODULE}/target/${APP}-*.jar extract

# Alternative runtime base image with RXTX installed
FROM adoptopenjdk/openjdk11:debianslim-jre AS debian-rxtx

# Install package
RUN apt-get update && apt-get install librxtx-java

# Link to default Java library search path
RUN mkdir -p /usr/java/packages && ln -s /usr/lib/jni /usr/java/packages/lib

# Second stage: Build the server image (needs only JRE)
FROM ${RUNTIME} AS runtime

# Run as non-root
RUN adduser --gecos "" --shell "/sbin/nologin" --disabled-password --no-create-home spring
USER spring

# Copy the classes and dependencies
WORKDIR /app
COPY --from=build /app/dependencies/ ./
COPY --from=build /app/spring-boot-loader/ ./
COPY --from=build /app/snapshot-dependencies/ ./
COPY --from=build /app/application/ ./

# Run the Spring Boot application
ENTRYPOINT ["java", "-Dspring.config.location=file:/config/", "org.springframework.boot.loader.JarLauncher"]
